# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jv_ZbsTenkYC1anK45F0ThR4F9HYs2QC
"""

pip install streamlit

pip freeze

import sqlite3
import pandas as pd

# データベースファイルの名前
database = 'blog.db'

# SQLiteデータベースに接続（データベースが存在しない場合は新規作成されます）
conn = sqlite3.connect(database)

# カーソルオブジェクトを作成する
c = conn.cursor()

# テーブルを作成する（例として）
c.execute('CREATE TABLE IF NOT EXISTS posts (author TEXT NOT NULL, title TEXT NOT NULL, content TEXT NOT NULL, date DATE NOT NULL)')

# カーソルを閉じる
c.close()

# 接続を閉じる
conn.close()

# 新しい投稿を追加する関数を定義します
def add_post(author, title, content, date):
    try:
        # データベースに接続します
        conn = sqlite3.connect(database)
        # カーソルオブジェクトを作成します
        c = conn.cursor()
        # posts テーブルに新しい行を挿入します
        c.execute('INSERT INTO posts (author, title, content, date) VALUES (?,?,?,?)', (author, title, content, date))
        # 変更をデータベースに保存します
        conn.commit()
        # カーソルと接続を閉じます
        c.close()
        conn.close()
    except sqlite3.Error as e:
        # エラーメッセージを表示します
        print(e)

# すべての投稿を取得する関数を定義します
def get_all_posts():
    try:
        # データベースに接続します
        conn = sqlite3.connect(database)
        # カーソルオブジェクトを作成します
        c = conn.cursor()
        # posts テーブルからすべての行を選択します
        c.execute('SELECT * FROM posts')
        # すべての結果を取得します
        data = c.fetchall()
        # カーソルと接続を閉じます
        c.close()
        conn.close()
        # データを返します
        return data
    except sqlite3.Error as e:
        # エラーメッセージを出力します
        print(e)

# タイトルで投稿を取得する関数を定義します
def get_post_by_title(title):
    try:
        # データベースに接続します
        conn = sqlite3.connect(database)
        # カーソルオブジェクトを作成します
        c = conn.cursor()
        # タイトルに一致する posts テーブルから行を選択します
        c.execute('SELECT * FROM posts WHERE title=?', (title,))
        # 結果を取得します
        data = c.fetchone()
        # カーソルと接続を閉じます
        c.close()
        conn.close()
        # データを返します
        return data
    except sqlite3.Error as e:
        # エラーメッセージを出力します
        print(e)

# 投稿を削除する関数を定義します
def delete_post(title):
    try:
        # データベースに接続します
        conn = sqlite3.connect(database)
        # カーソルオブジェクトを作成します
        c = conn.cursor()
        # タイトルに一致する posts テーブルから行を削除します
        c.execute('DELETE FROM posts WHERE title=?', (title,))
        # 変更をデータベースに保存します
        conn.commit()
        # カーソルと接続を閉じます
        c.close()
        conn.close()
    except sqlite3.Error as e:
        # エラーメッセージを表示します
        print(e)

# 関数をテストする
add_post('Alice', 'Hello World', 'This is my first post', '2021-01-01')
add_post('Bob', 'Streamlit Rocks', 'This is my second post', '2021-01-02')
add_post('Charlie', 'Python is Awesome', 'This is my third post', '2021-01-03')
print(get_all_posts())
print(get_post_by_title('Streamlit Rocks'))
delete_post('Hello World')
print(get_all_posts())

# 投稿を表示するための HTML テンプレートを定義します
title_temp = """
< div  style = "background-color:#464e5f;padding:10px;border-radius:10px;margin:10px;" >
< h4  style = "color:white;text-align:center;" > {} </ h4 >
< img  src = "https://www.w3schools.com/howto/img_avatar.png"  alt = "Avatar"  style = "vertical-align: middle;float:left;width: 50px;height: 50px;border-radius: 50%;" >
< h6 > Author: {} </ h6 >
< br />
< br />
< p  style = "text-align:justify" > {} </ p >
</ div >
 """

post_temp = """
< div  style = "background-color:#464e5f;padding:10px;border-radius:5px;margin:10px;" >
< h4  style = "color:white;text-align:center;" > {} </ h4 >
< h6 >著者: {} </ h6 >
< h6 >日付: {} </ h6 >
< img  src = "https://www.w3schools.com/howto/img_avatar.png"  alt = "アバター"  style = "vertical-align: middle;width: 50px;height: 50px;border-radius: 50%;" >
< br />
< br />
< p  style = "text-align:justify" > {} </ p >
</ div >
 """

# さまざまなオプションを持つサイドバーメニューを作成する
menu = ["ホーム", "投稿の表示", "投稿の追加", "検索", "管理"]
choice = st.sidebar.selectbox("メニュー", menu)

# 選択されたオプションを表示します
if choice == "Home" :
    st.title( "Welcome to my blog" )
    st.write( "This is a simple blog app created with streamlit and python." )
    st.write( "You can view, add, search, and manage posts using the sidebar menu." )
    st.write( "Enjoy!" )
elif choice == "View Posts" :
    st.title( "View Posts" )
    st.write( "Here you can see all the posts in the blog." )
    # データベースからすべての投稿を取得します
    posts = get_all_posts()
    # 各投稿をカードとして表示します
    for post in posts:
        st.markdown(title_temp. format (post[ 1 ], post[ 0 ], post[ 2 ][: 50 ] + "..." ), unsafe_allow_html= True )
        # 投稿全体を表示するボタンを追加します
        if st.button( "Read More" , key=post[ 1 ]):
            st.markdown(post_temp. format (post[ 1 ], post[ 0 ], post[ 3 ], post[ 2 ]), unsafe_allow_html= True )
elif choice == "投稿の追加" :
    st.title( "投稿の追加" )
    st.write( "ここでブログに新しい投稿を追加できます。" )
    # 投稿の詳細を取得するためのフォームを作成します。
    with st.form(key= "add_form" ):
        author = st.text_input( "著者" )
        title = st.text_input( "タイトル" )
        content = st.text_area( "コンテンツ" )
        date = st.date_input( "日付" )
        submit = st.form_submit_button( "送信" )
    # フォームが送信された場合、投稿をデータベースに追加します。
    if submit:
        add_post(author, title, content, date)
        st.success( "投稿が正常に追加されました" )
elif choice == "検索" :
    st.title( "検索" )
    st.write( "ここではタイトルまたは著者で投稿を検索できます。" )
    # 検索クエリを取得するためのテキスト入力を作成します
    query = st.text_input( "クエリを入力してください" )
    # クエリが空でない場合は、一致する投稿を検索します
    if query:
        # データベースからすべての投稿を取得します
        posts = get_all_posts()
        # クエリで投稿をフィルターします
        results = [post for post in posts if query.lower() in post[ 0 ].lower() or query.lower() in post[ 1 ].lower()]
        # 結果を表示します
        if results:
            st.write( f"一致する投稿が{ len (results)}件見つかりました:" )
            for result in results:
                st.markdown(title_temp. format (result[ 1 ], result[ 0 ], result[ 2 ][: 50 ] + "..." ), unsafe_allow_html= True )
                # 投稿全体を表示するボタンを追加します
                if st.button( "続きを読む" , key=result[ 1 ]):
                    st.markdown(post_temp. format (result[ 1 ], result[ 0 ], result[ 3 ], result[ 2 ]), unsafe_allow_html= True )
        else :
            st.write( "一致する投稿が見つかりません" )
elif choice == "管理" :
    st.title( "管理" )
    st.write( "ここで投稿を削除したり、統計情報を表示したりできます。" )
    # 削除する投稿を選択するためのセレクトボックスを作成します
    titles = [post[ 1 ] for post in get_all_posts()]
    title = st.selectbox( "削除する投稿を選択してください" , titles)
    # 削除を確認するためのボタンを追加します
    if st.button( "削除" ):
        delete_post(title)
        st.success( "投稿が正常に削除されました" )
    # 統計情報を表示するためのチェックボックスを作成します
    if st.checkbox( "統計情報を表示" ):
        # データベースからすべての投稿を取得します
        posts = get_all_posts()
        # 投稿をデータフレームに変換します
        df = pd.DataFrame(posts,columns=[ "著者", "title" , "content" , "date" ])
        # 基本的な統計情報を表示します
        st.write( "投稿数:" , len (posts))
        st.write( "投稿者数:" , len (df[ "author" ].unique()))
        st.write( "最新の投稿:" , df[ "date" ]. max ())
        st.write( "最も古い投稿:" , df[ "date" ]. min ())
        # 投稿者別の投稿の棒グラフを表示します
        st.write( "投稿者別:" )
        author_count = df[ "author" ].value_counts()
        st.bar_chart(author_count)